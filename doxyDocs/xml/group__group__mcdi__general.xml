<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__group__mcdi__general" kind="group">
    <compoundname>group_mcdi_general</compoundname>
    <title>Motor Control Driver Interface (MCDI)</title>
    <innergroup refid="group__group__mcdi__macros">Macros</innergroup>
    <innergroup refid="group__group__mcdi__enums">Enumerated Types</innergroup>
    <innergroup refid="group__group__mcdi__data__structures">Data Structures</innergroup>
    <innergroup refid="group__group__mcdi__functions">Functions</innergroup>
    <innergroup refid="group__group__mcdi__gen__func">Generated Functions</innergroup>
    <briefdescription>
<para>The MCDI represents the device-agnostic top-level API source code, the control service code, and the Solution Personality. </para>
    </briefdescription>
    <detaileddescription>
<para>The Solution Personality:<itemizedlist>
<listitem><para>provides the integration with the Device Configurator</para>
</listitem><listitem><para>provides a graphical configuration interface</para>
</listitem><listitem><para>generates device-specific HW configuration code and the control code for the motor control applications</para>
</listitem><listitem><para>generates templates for the fast and slow control loop ISRs</para>
</listitem><listitem><para>supports single-shunt and three-shunt load current measurement schemes</para>
</listitem><listitem><para>supports up-to-two motor instances</para>
</listitem></itemizedlist>
</para>
<para><image type="html" name="MCDI_structure.png" width="50%"></image>
</para>
<sect1 id="group__group__mcdi__general_1section_mcdi_quick_start">
<title>Quick Start</title>
<para>In order to use the MCDI as a standalone interface for alternative motor control libraries:</para>
<para><itemizedlist>
<listitem><para>Create a New Application in ModusToolbox<trademark/> IDE <simplesect kind="par"><title></title><para><image type="html" name="MakeNewApp.png" width="9%"></image>
</para>
</simplesect>
</para>
</listitem><listitem><para>Use the &apos;Empty App&apos; template. <simplesect kind="par"><title></title><para><image type="html" name="UseTemplate.png"></image>
</para>
</simplesect>
</para>
</listitem><listitem><para>Add the &apos;motor-ctrl-lib&apos; to the created application using the Library Manager <simplesect kind="par"><title></title><para><image type="html" name="UseLibraryManager.png" width="10%"></image>
</para>
</simplesect>
</para>
</listitem><listitem><para>Add this code into the project &apos;Makefile&apos; <simplesect kind="par"><title></title><para><image type="html" name="MakefileContent.png"></image>
</para>
</simplesect>
</para>
</listitem><listitem><para>Launch the Device Configurator <simplesect kind="par"><title></title><para><image type="html" name="LaunchDeviceConfigurator.png" width="12%"></image>
</para>
</simplesect>
</para>
</listitem><listitem><para>Add the Motor Control instance <simplesect kind="par"><title></title><para><image type="html" name="myMotor.png"></image>
</para>
</simplesect>
</para>
</listitem><listitem><para>Configure all hardware-specific Motor Control solution parameters and save them (or press Ctrl+S to save). After that, the appropriate code for the application will be generated by the Solution Personality.</para>
</listitem><listitem><para>Add both the <ref refid="group__group__mcdi__general_1myMotor_slow_callback" kindref="member">myMotor_slow_callback</ref> function definition and the <ref refid="group__group__mcdi__general_1myMotor_fast_callback" kindref="member">myMotor_fast_callback</ref> function definition into the <bold>main.c</bold>.</para>
</listitem><listitem><para>Build the project.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The <bold>Init</bold> function will be created and its call at startup will be performed in scope of the <bold>init_cycfg_all()</bold> function only if the &quot;Initialize During Startup&quot; checkbox is checked during configuration process in the Device Configurator tool. <image type="html" name="init.png"></image>
</para>
</simplesect>
</para>
</sect1>
<sect1 id="group__group__mcdi__general_1section_mcdi_usage_details">
<title>Usage Details</title>
<para>Assume the motor instance is named in the ModusToolbox<trademark/> Device Configurator Tool as <bold>myMotor</bold>. </para>
<sect2 id="group__group__mcdi__general_1subsection_mcdi_functions">
<title>The MCDI Functions</title>
<para><simplesect kind="par"><title></title><para>The simplest way to use <bold>myMotor</bold> is to use the <ref refid="group__group__mcdi__gen__func" kindref="compound">instance-based generated myMotor API</ref>: <programlisting filename="fut_gen_snippet/main.c"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assume<sp/>the<sp/>HPPASS<sp/>(as<sp/>well<sp/>as<sp/>other<sp/>shared<sp/>resource)<sp/>is<sp/>already<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__mcdi__gen__func_1gaef43d6aaf392bb7de1aae1200a9235aa" kindref="member">myMotor_init</ref>();<sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>all<sp/>the<sp/>motor-specific<sp/>PWMs<sp/>and<sp/>Timers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>all<sp/>the<sp/>rest<sp/>of<sp/>solutions/peripherals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__mcdi__gen__func_1ga4112d22a7c82ada7dc03f5370cb22f80" kindref="member">myMotor_enable</ref>();<sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>all<sp/>the<sp/>motor-specific<sp/>PWMs<sp/>and<sp/>Timers,<sp/>after<sp/>this<sp/>action<sp/>they<sp/>are<sp/>sensitive<sp/>to<sp/>input<sp/>triggers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>all<sp/>the<sp/>rest<sp/>of<sp/>solutions/peripherals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__mcdi__gen__func_1ga9c36d7e592ae9e25af6da22ce444b0da" kindref="member">myMotor_start</ref>();<sp/></highlight><highlight class="comment">/*<sp/>Safely<sp/>start<sp/>the<sp/>shared<sp/>resources<sp/>(if<sp/>not<sp/>started<sp/>yet)<sp/>and<sp/>all<sp/>the<sp/>motor-specific<sp/>PWMs<sp/>and<sp/>Timers<sp/>synchronously<sp/>(except<sp/>the<sp/>Slow<sp/>Timer<sp/>-<sp/>it<sp/>is<sp/>started<sp/>asynchronously)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
</programlisting> Or, as an alternative you can use the <ref refid="group__group__mcdi__functions" kindref="compound">MCDI data-driven API functions</ref>: <programlisting filename="fut_dat_snippet/main.c"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CY_RSLT_SUCCESS<sp/>!=<sp/><ref refid="group__group__mcdi__functions_1ga51a3bd9bed4fc1317476522d054fb583" kindref="member">mtb_mcdi_init</ref>(&amp;myMotor_cfg))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CY_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>possible<sp/>error<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__mcdi__functions_1gacbee2416e6dfff366a74a3cea179c2cc" kindref="member">mtb_mcdi_enable</ref>(&amp;myMotor_cfg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CY_RSLT_SUCCESS<sp/>!=<sp/><ref refid="group__group__mcdi__functions_1gace17318abfe875652b61ba0f43824339" kindref="member">mtb_mcdi_start</ref>(&amp;myMotor_cfg))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CY_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>Process<sp/>possible<sp/>error<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>after<sp/>some<sp/>time,<sp/>when<sp/>motor<sp/>control<sp/>HW<sp/>has<sp/>to<sp/>be<sp/>stopped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__mcdi__functions_1gad3dd6a067f1d7921b2ff843cdb62111e" kindref="member">mtb_mcdi_disable</ref>(&amp;myMotor_cfg);</highlight></codeline>
</programlisting> The first is preferable.</para>
</simplesect>
</para>
</sect2>
<sect2 id="group__group__mcdi__general_1subsection_mcdi_control">
<title>The MCDI Cascade Control</title>
<para><simplesect kind="par"><title></title><para>The Solution Personality GUI and its code generation engine provide users a template to create a cascaded control system with the inner and outer control loops.<linebreak/>
 The inner control loop name in MCDI is a Fast Control Loop, and the outer control loop name is a Slow Control Loop.<linebreak/>
 <linebreak/>
The Fast Control Loop settings provide:<itemizedlist>
<listitem><para>automatic/manual allocation of hardware resources for the Sync timer functionality</para>
</listitem><listitem><para>automatic/manual allocation of hardware resources for the Fast timer functionality</para>
</listitem><listitem><para>Fast Control Loop frequency to PWM frequency ratio configuration</para>
</listitem><listitem><para>Timer compare-value update time-point configuration</para>
</listitem><listitem><para>ADC group conversion-start time-point configuration</para>
</listitem><listitem><para>Fast Control Loop interrupt priority configuration</para>
</listitem><listitem><para>Fast Control Loop callback-function name definition</para>
</listitem><listitem><para>ADC conversion-result storage-array name definition </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title></title><para>The Slow Control Loop settings provide:<itemizedlist>
<listitem><para>automatic/manual allocation of hardware resources for the Slow timer functionality</para>
</listitem><listitem><para>Slow Control Loop frequency to Fast Control Loop frequency ratio configuration</para>
</listitem><listitem><para>Slow Control Loop interrupt-priority configuration</para>
</listitem><listitem><para>Slow Control Loop callback-function name definition </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title></title><para>The Solution Personality code generation engine declares all user-predefined callbacks as external functions with such a prototype: <programlisting filename=".c"><codeline><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint16_t<sp/>predefined_function_name(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight></codeline>
</programlisting> Because of this, in the user application, the appropriate function definitions must be made at the global level.<linebreak/>
 You can use as a template (in the main.c, for example), the functions from the code snippets listed below. <anchor id="group__group__mcdi__general_1myMotor_slow_callback"/> <programlisting filename="3shunt/main.c"><codeline><highlight class="preprocessor">#define<sp/>MY_MOTOR_SUCCESS<sp/>(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>myMotor_slow_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>state<sp/>=<sp/>MY_MOTOR_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <anchor id="group__group__mcdi__general_1myMotor_fast_callback"/> <programlisting filename="3shunt/main.c"><codeline><highlight class="normal">uint16_t<sp/>myMotor_fast_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(void)myMotor_fastDataPtr[0];<sp/></highlight><highlight class="comment">/*Iu*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(void)myMotor_fastDataPtr[1];<sp/></highlight><highlight class="comment">/*Iv*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(void)myMotor_fastDataPtr[2];<sp/></highlight><highlight class="comment">/*Iw*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>state<sp/>=<sp/>MY_MOTOR_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</simplesect>
</para>
</sect2>
<sect2 id="group__group__mcdi__general_1subsection_mcdi_inter_connectivity">
<title>The MCDI resources interconnection and synchronization</title>
<para><simplesect kind="par"><title></title><para>The MCDI Solution Personality occupies the following resources for each Motor Control instance:<itemizedlist>
<listitem><para>Three timers in PWM mode</para>
</listitem><listitem><para>Three timers in Timer mode</para>
</listitem><listitem><para>Two HPPASS SAR Sequencer groups, with three ADC channels in each</para>
</listitem><listitem><para>Seven or eight GPIOs (depends on configuration)</para>
</listitem><listitem><para>Two or three HW interrupts (depends on configuration) </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title></title><para>The Motor Control instance interconnection is shown in the picture below. <image type="html" name="MCDI_resources_interconnection.png"></image>
 <linebreak/>
 All the PWM, Sync and Fast timers are synchronized by the Personality engine and started synchronously. The Slow Timer is not synchronized with the others and starts asynchronously.<linebreak/>
 The instance-based <ref refid="group__group__mcdi__gen__func_1ga9c36d7e592ae9e25af6da22ce444b0da" kindref="member">myMotor_start</ref> and the data-driven <ref refid="group__group__mcdi__functions_1gace17318abfe875652b61ba0f43824339" kindref="member">mtb_mcdi_start</ref> functions are provided by MCDI for this purpose. </para>
</simplesect>
</para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
